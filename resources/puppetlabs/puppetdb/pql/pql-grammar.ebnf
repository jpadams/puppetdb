<query> = [<whitespace>], from, [<whitespace>];
from = entity, [[<whitespace>], extract], [<whitespace>], where;
extract = <lbracket>, [<whitespace>], [extractfields], [<whitespace>], <rbracket>;
<extractfields> = fieldlist;
<where> = <lbrace>, [<whitespace>], [expression], [<whitespace>], [groupbyclause | {pagingclause, [<whitespace>]}], {<whitespace>}, <rbrace>;
<entity> = 'facts' |
           'reports' |
           'catalogs' |
           'packages' |
           'package_inventory' |
           'resources' |
           'nodes' |
           'environments' |
           'factsets' |
           'fact_paths' |
           'fact_contents' |
           'inventory' |
           'edges' |
           'events';
<expression> = expr-or;
expr-or      = expr-and { <whitespace>, or, <whitespace>, expr-or };
expr-and     = expr-not { <whitespace>, and, <whitespace>, expr-and };
expr-not     = ( not, [<whitespace>], expr-not ) | expr-rest;
<expr-rest>  = ( <lparens>, [<whitespace>], expression, [<whitespace>], <rparens> ) | condexpression | condexpnull | subquery;
subquery = entity, [<whitespace>], where;
condexpression  = (condexpregexp | condexpregexparray | condexpinequality | condexpmatch | condexpin);
<condexpregexp> = field, [<whitespace>], condregexp, [<whitespace>], valueregexp;
<condexpregexparray> = field, [<whitespace>], condregexparray, [<whitespace>], valueregexparray;
<condexpinequality> = field, [<whitespace>], condinequality, [<whitespace>], valueordered;
<condexpmatch>  = field, [<whitespace>], condmatch, [<whitespace>], valuematch;
<condexpin>     = (field | groupedfieldlist), [<whitespace>], condin, [<whitespace>], valuein;
condexpnull   = field, [<whitespace>], (condisnull | condisnotnull);
condisnull    = <'is null'>;
condisnotnull = <'is not null'>;
groupedfieldlist = <lbracket>, [<whitespace>], fieldlist, [<whitespace>], <rbracket>;
<fieldlist>      = (field | function), [ [<whitespace>], <','>, [<whitespace>], fieldlist ];
function         = functionname, [<whitespace>], groupedarglist;
<functionname>   = 'count' | 'avg' | 'sum' | 'min' | 'max' | 'to_string';
groupedarglist = <lparens>, [<whitespace>], [arglist], [<whitespace>], <rparens>;
<arglist>      = (field | string), [ [<whitespace>], <','>, [<whitespace>], stringlist ];
<stringlist>   = string , [ [<whitespace>], <','>, [<whitespace>], stringlist ];
field = #'[a-zA-Z0-9_]+\??' | (dottedfield, fieldpath);
<fieldpath> = <'.'>, (quotedfield | standardfield | matchfield) , [fieldpath];
<quotedfield> = #'\".*?\"(?=\.|\s)';
<matchfield> = #'match\(.*?\)';
<standardfield> = #'[^\s\.\"]+';
<dottedfield> = 'facts' | 'trusted' | 'parameters';
<condregexp>      = '~';
<condregexparray> = '~>';
<condinequality>  = '>=' | '<=' | '<' | '>';
<condmatch>       = '=';
<condin>          = 'in';
<valueregexp>      = string;
<valueregexparray> = groupedregexplist;
<valueordered>      = integer | real | string; (* Dates are parsed as strings *)
<valuematch>       = string | integer | real | boolean;
<valuein>          = query | groupedliterallist;
groupedregexplist = <lbracket>, [<whitespace>], regexplist, [<whitespace>], <rbracket>;
<regexplist>      = string, [ [<whitespace>], <','>, [<whitespace>], regexplist ];
groupedliterallist = <lbracket>, [<whitespace>], literallist, [<whitespace>], <rbracket>;
<literallist>      = literal, [ [<whitespace>], <','>, [<whitespace>], literallist ];
<literal>          = string | integer | real | boolean;
<and> = <'and'>;
<or>  = <'or'>;
not   = <'!'>;
<string> = dqstring | sqstring;
dqstring = (<doublequote>, stringwithoutdoublequotes, <doublequote>);
<stringwithoutdoublequotes> = #'(?:[^"\\]|\\.)*';
<doublequote> = "\"";
sqstring = (<singlequote>, stringwithoutsinglequotes, <singlequote>);
<stringwithoutsinglequotes> = #'(?:[^\'\\]|\\.)*';
<singlequote> = "'";
<groupbyclause> = groupby;
groupby  = <'group by'>, <whitespace>, fieldlist;
<pagingclause> = limit | offset | orderby;
limit = <'limit'>, <whitespace>, integer;
offset = <'offset'>, <whitespace>, integer;
orderby = <'order by'>, <whitespace>, orderparam, [orderparamlist];
<orderparamlist> = (<','>, [<whitespace>], orderparam)+;
orderparam = !('asc' | 'desc') field, [<whitespace> direction], [<whitespace>];
<direction> = 'asc' | 'desc';
<lparens> = '(';
<rparens> = ')';
<lbrace> = '{';
<rbrace> = '}';
<lbracket> = '[';
<rbracket> = ']';
boolean = true | false;
true = <"true">;
false = <"false">;
integer    = [negative], digits;
real       = [negative], digits, ".", digits, [exp];
exp        = <"E" | "e">, [negative | positive], digits;
<digits>   = #"[0-9]+";
<negative> = "-";
<positive> = "+";
<whitespace> = #'\s+';
